loadaddr=0x82000000
kernel_addr_r=0x82000000
fdtaddr=0x88000000
dtboaddr=0x89000000
fdt_addr_r=0x88000000
fdtoverlay_addr_r=0x89000000
rdaddr=0x88080000
ramdisk_addr_r=0x88080000
scriptaddr=0x80000000
pxefile_addr_r=0x80100000
bootm_size=0x10000000
boot_fdt=try
boot_fit=0
secure_rprocs=0
addr_fit=0x90000000
name_fit=fitImage
update_to_fit=setenv loadaddr ${addr_fit}; setenv bootfile ${name_fit}
get_fit_overlaystring=
 for overlay in $name_overlays; do;
  setexpr name_fit_overlay gsub / _ conf-${overlay};
  setenv overlaystring ${overlaystring}'#'${name_fit_overlay};
 done;
get_fit_config=setexpr name_fit_config gsub / _ conf-${fdtfile}
run_fit=run get_fit_config; bootm ${addr_fit}#${name_fit_config}${overlaystring}
update_do_main_cpsw0_qsgmii_phyinit=setenv do_main_cpsw0_qsgmii_phyinit 0;
bootcmd_ti_mmc=
 run init_${boot};
 run update_do_main_cpsw0_qsgmii_phyinit;
 if test ${do_main_cpsw0_qsgmii_phyinit} -eq 1;
  then run main_cpsw0_qsgmii_phyinit;
 fi;
 run boot_rprocs;
 if test ${boot_fit} -eq 1;
  then run get_fit_${boot}; run get_fit_overlaystring; run run_fit;
 else;
  run get_kern_${boot}; run get_fdt_${boot}; run get_overlay_${boot}; run run_kern;
 fi;
mmcdev=0
mmcrootfstype=ext4 rootwait
finduuid=part uuid ${boot} ${bootpart} uuid
args_mmc=run finduuid;setenv bootargs console=${console}
 ${optargs}
 root=PARTUUID=${uuid} rw
 rootfstype=${mmcrootfstype}
bootscript=echo Running bootscript from mmc${mmcdev} ...;
 source ${loadaddr}
bootenvfile=uEnv.txt
importbootenv=echo Importing environment from mmc${mmcdev} ...;
 env import -t ${loadaddr} ${filesize}
loadbootenv=fatload mmc ${mmcdev} ${loadaddr} ${bootenvfile}
loadimage=load ${devtype} ${bootpart} ${loadaddr} ${bootdir}/${bootfile}
loadfdt=load ${devtype} ${bootpart} ${fdtaddr} ${bootdir}/dtb/${fdtfile}
get_fdt_mmc=load mmc ${bootpart} ${fdtaddr} ${bootdir}/dtb/${fdtfile}
envboot=if mmc dev ${mmcdev}; then
 if mmc rescan; then
  echo SD/MMC found on device ${mmcdev};
  if test -n "${loadbootscript}" && run loadbootscript; then
   run bootscript;
  else
   if run loadbootenv; then
    echo Loaded env from ${bootenvfile};
    run importbootenv;
   fi;
   if test -n $uenvcmd; then
    echo Running uenvcmd ...;
    run uenvcmd;
   fi;
  fi;
 fi;
  fi;
mmcloados=
 if test ${boot_fdt} = yes || test ${boot_fdt} = try; then
  if run get_fdt_mmc; then
   bootz ${loadaddr} - ${fdtaddr};
  else
   if test ${boot_fdt} = try; then
    bootz;
   else
    echo WARN: Cannot load the DT;
    fi;
  fi;
 else
  bootz;
 fi;
mmcboot=if mmc dev ${mmcdev}; then
 devnum=${mmcdev};
 devtype=mmc;
 if mmc rescan; then
  echo SD/MMC found on device ${mmcdev};
  if run loadimage; then
   run args_mmc;
   if test ${boot_fit} -eq 1; then
    run run_fit;
   else
    run mmcloados;
   fi;
  fi;
 fi;
  fi;
init_mmc=run args_all args_mmc
get_overlay_mmc=
 fdt address ${fdtaddr};
 fdt resize 0x100000;
 for overlay in $name_overlays;
 do;
 load mmc ${bootpart} ${dtboaddr} ${bootdir}/dtb/${overlay} &&
 fdt apply ${dtboaddr};
 done;
get_kern_mmc=load mmc ${bootpart} ${loadaddr}
 ${bootdir}/${name_kern}
get_fit_mmc=load mmc ${bootpart} ${addr_fit}
 ${bootdir}/${name_fit}
partitions=name=rootfs,start=0,size=-,uuid=${uuid_gpt_rootfs}
dfu_alt_info_mmc=
 boot part 1 1;
 rootfs part 1 2;
 tiboot3.bin fat 1 1;
 tispl.bin fat 1 1;
 u-boot.img fat 1 1;
 uEnv.txt fat 1 1;
 sysfw.itb fat 1 1
dfu_alt_info_emmc=
 rawemmc raw 0 0x800000 mmcpart 1;
 rootfs part 0 1;
 tiboot3.bin.raw raw 0x0 0x400 mmcpart 1;
 tispl.bin.raw raw 0x400 0x1000 mmcpart 1;
 u-boot.img.raw raw 0x1400 0x2000 mmcpart 1;
 u-env.raw raw 0x3400 0x100 mmcpart 1;
 sysfw.itb.raw raw 0x3600 0x800 mmcpart 1
dfu_alt_info_ospi=
 tiboot3.bin raw 0x0 0x080000;
 tispl.bin raw 0x080000 0x200000;
 u-boot.img raw 0x280000 0x400000;
 u-boot-env raw 0x680000 0x020000;
 sysfw.itb raw 0x6c0000 0x100000;
 rootfs raw 0x800000 0x3800000
dfu_alt_info_ram=
 tispl.bin ram 0x80080000 0x200000;
 u-boot.img ram 0x81000000 0x400000
dfu_alt_info_ospi_nand=
 ospi_nand.tiboot3 part 1;
 ospi_nand.tispl part 2;
 ospi_nand.u-boot part 3;
 ospi_nand.env part 4;
 ospi_nand.env.backup part 5;
 ospi_nand.rootfs part 6;
 ospi_nand.phypattern part 7
dfu_alt_info_nand=
 NAND.tiboot3 part 0 1;
 NAND.tispl part 0 2;
 NAND.tiboot3.backup part 0 3;
 NAND.u-boot part 0 4;
 NAND.u-boot-env part 0 5;
 NAND.u-boot-env.backup part 0 6;
 NAND.file-system part 0 7
mtdids=spi-nand0=spi-nand0
mtdparts=mtdparts=spi-nand0:512k(ospi_nand.tiboot3),2m(ospi_nand.tispl),4m(ospi_nand.u-boot),256k(ospi_nand.env),256k(ospi_nand.env.backup),98048k@32m(ospi_nand.rootfs),256k@130816k(ospi_nand.phypattern)
ospi_nand_bootpart=ospi_nand.rootfs
ospi_nand_bootvolume=ubi0:rootfs
ospi_nand_ubi_init=ubi part ${ospi_nand_bootpart}; ubifsmount ${ospi_nand_bootvolume};
args_ospi_nand=setenv bootargs console=${console}
 ${optargs} ubi.mtd=${ospi_nand_bootpart}
 root=${ospi_nand_bootvolume} rootfstype=ubifs
init_ospi_nand=run args_all args_ospi_nand ospi_nand_ubi_init
get_fdt_ospi_nand=ubifsload ${fdtaddr} ${bootdir}/dtb/${fdtfile};
get_overlay_ospi_nand=
        fdt address ${fdtaddr}
        fdt resize 0x100000;
        for overlay in $name_overlays;
        do;
        ubifsload ${dtboaddr} ${bootdir}/dtb/${overlay} &&
        fdt apply ${dtboaddr};
        done;
get_kern_ospi_nand=ubifsload ${loadaddr} ${bootdir}/${name_kern}
get_fit_ospi_nand=ubifsload ${addr_fit} ${bootdir}/${name_fit}
dorprocboot=0
boot_rprocs=
 if test ${dorprocboot} -eq 1 && test ${boot} = mmc; then
   rproc init;
   run boot_rprocs_mmc;
  fi;
rproc_load_and_boot_one=
 if load mmc ${bootpart} $loadaddr ${rproc_fw}; then
  if rproc load ${rproc_id} ${loadaddr} ${filesize}; then
   rproc start ${rproc_id};
  fi;
 fi
boot_rprocs_mmc=
 env set rproc_id;
 env set rproc_fw;
 env set secure_suffix;
 if test ${secure_rprocs} -eq 1; then
  env set secure_suffix -sec;
 fi;
 for i in ${rproc_fw_binaries} ; do
  if test -z "${rproc_id}" ; then
   env set rproc_id $i;
  else
   env set rproc_fw $i${secure_suffix};
   run rproc_load_and_boot_one;
   env set rproc_id;
   env set rproc_fw;
  fi;
 done
name_kern=Image
console=ttyS2,115200n8
args_all=setenv optargs ${optargs} earlycon=ns16550a,mmio32,0x02800000
 ${mtdparts}
run_kern=booti ${loadaddr} ${rd_spec} ${fdtaddr}
boot_targets=mmc1 mmc0 usb pxe dhcp
boot=mmc
mmcdev=1
bootpart=1:2
bootdir=/boot
rd_spec=-
splashfile=ti_logo_414x97_32bpp.bmp.gz
splashimage=0x80200000
splashpos=m,m
splashsource=mmc
rproc_fw_binaries= 0 /lib/firmware/am62-mcu-m4f0_0-fw
